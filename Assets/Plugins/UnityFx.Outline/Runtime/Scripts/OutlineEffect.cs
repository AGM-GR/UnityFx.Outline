// Copyright (C) 2019 Alexander Bogarsukov. All rights reserved.
// See the LICENSE.md file in the project root for more information.

using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;

namespace UnityFx.Outline
{
	/// <summary>
	/// Post-effect script. Should be attached to camera.
	/// </summary>
	/// <seealso cref="OutlineLayer"/>
	/// <seealso cref="OutlineBehaviour"/>
	/// <seealso cref="https://willweissman.wordpress.com/tutorials/shaders/unity-shaderlab-object-outlines/"/>
	[RequireComponent(typeof(Camera))]
	public sealed class OutlineEffect : MonoBehaviour
	{
		#region data

#pragma warning disable 0649

		[SerializeField]
		private OutlineResources _outlineResources;

#pragma warning restore 0649

		private List<OutlineLayer> _layers;
		private CommandBuffer _commandBuffer;
		private Material _renderMaterial;

		#endregion

		#region interface

		/// <summary>
		/// Gets or sets a <see cref="Shader"/> that renders objects outlined with a solid while color.
		/// </summary>
		public Shader RenderColorShader
		{
			get
			{
				return _outlineResources.RenderShader;
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException("RenderColorShader");
				}

				if (_outlineResources.RenderShader != value)
				{
					_outlineResources.RenderShader = value;

					if (_renderMaterial)
					{
						_renderMaterial.shader = value;
					}
				}
			}
		}

		/// <summary>
		/// Gets or sets a <see cref="Shader"/> that renders outline around the mask, generated by <see cref="RenderColorShader"/>.
		/// </summary>
		public Shader PostProcessShader
		{
			get
			{
				return _outlineResources.PostProcessShader;
			}
			set
			{
				if (value == null)
				{
					throw new ArgumentNullException("PostProcessShader");
				}

				if (_outlineResources.PostProcessShader != value)
				{
					_outlineResources.PostProcessShader = value;

					foreach (var layers in _layers)
					{
						layers.PostProcessMaterial.shader = value;
					}
				}
			}
		}

		/// <summary>
		/// Gets all registered outlie layers.
		/// </summary>
		public IEnumerable<OutlineLayer> Layers
		{
			get
			{
				if (_layers == null)
				{
					_layers = new List<OutlineLayer>();
				}

				return _layers;
			}
		}

		/// <summary>
		/// Creates a new outlie layer.
		/// </summary>
		public OutlineLayer AddLayer()
		{
			if (_layers == null)
			{
				_layers = new List<OutlineLayer>();
			}

			if (_renderMaterial == null)
			{
				_renderMaterial = new Material(_outlineResources.RenderShader);
			}

			var layer = new OutlineLayer(_renderMaterial, new Material(_outlineResources.PostProcessShader));
			_layers.Add(layer);
			return layer;
		}

		/// <summary>
		/// Removes the specified layer.
		/// </summary>
		public void RemoveLayer(OutlineLayer layer)
		{
			if (_layers != null)
			{
				_layers.Remove(layer);
			}
		}

		/// <summary>
		/// Removes all layers.
		/// </summary>
		public void RemoveAllLayers()
		{
			if (_layers != null)
			{
				_layers.Clear();
			}
		}

		#endregion

		#region MonoBehaviour

		private void OnEnable()
		{
			var camera = GetComponent<Camera>();

			if (camera)
			{
				_commandBuffer = new CommandBuffer();
				_commandBuffer.name = OutlineHelpers.EffectName;

				FillCommandBuffer();

				camera.AddCommandBuffer(OutlineHelpers.RenderEvent, _commandBuffer);
			}
		}

		private void OnDisable()
		{
			var camera = GetComponent<Camera>();

			if (camera)
			{
				camera.RemoveCommandBuffer(OutlineHelpers.RenderEvent, _commandBuffer);
			}

			if (_commandBuffer != null)
			{
				_commandBuffer.Dispose();
				_commandBuffer = null;
			}
		}

		private void Update()
		{
			var needUpdate = false;

			foreach (var layer in _layers)
			{
				if (layer.IsChanged)
				{
					needUpdate = true;
					break;
				}
			}

			if (needUpdate)
			{
				FillCommandBuffer();
			}
		}

		#endregion

		#region implementation

		private void FillCommandBuffer()
		{
			var dst = new RenderTargetIdentifier(BuiltinRenderTextureType.CameraTarget);

			OutlineHelpers.RenderBegin(_commandBuffer);

			foreach (var layer in _layers)
			{
				layer.FillCommandBuffer(_commandBuffer, dst);
			}

			OutlineHelpers.RenderEnd(_commandBuffer);
		}

		#endregion
	}
}
